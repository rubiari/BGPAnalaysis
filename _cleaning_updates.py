#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
MASTER'S FINAL PROJECT
'ANALYSIS BGP rate of prefix VS traffic/prefix'
David Arias Rubio
"""

"""
Preprocessing step to clean all the BGP Update stream from duplicate traces,
updates generated by beacon routers, or other Updates that are not part
of the interest to this study
"""

import os
import datetime as datetime
import pandas as pd
import warnings
import numpy as np
warnings.filterwarnings("ignore")

lst_beacon = ["84.205.64.0/24",
             "84.205.65.0/24",
             "84.205.67.0/24",
             "84.205.68.0/24",
             "84.205.69.0/24",
             "84.205.70.0/24",
             "84.205.71.0/24",
             "84.205.74.0/24",
             "84.205.75.0/24",
             "84.205.76.0/24",
             "84.205.77.0/24",
             "84.205.78.0/24",
             "84.205.79.0/24",
             "84.205.73.0/24",
             "84.205.82.0/24",
             "93.175.149.0/24",
             "93.175.151.0/24"]

lst_anchor = ["84.205.80.0/24",
              "84.205.81.0/24",
              "84.205.83.0/24",
              "84.205.84.0/24",
              "84.205.85.0/24",
              "84.205.86.0/24",
              "84.205.87.0/24",
              "84.205.90.0/24",
              "84.205.91.0/24",
              "84.205.92.0/24",
              "84.205.93.0/24",
              "84.205.94.0/24",
              "84.205.95.0/24",
              "84.205.89.0/24",
              "84.205.88.0/24",
              "93.175.148.0/24",
              "93.175.150.0/24"]

BA = { 'ANCHOR' : lst_anchor, 'BEACON' : lst_beacon }
df_BA = pd.DataFrame(BA)

def _cleaning_updates(frame):
    df = pd.DataFrame(frame)

    #Removing duplicates traces
    df = df.loc[(df.type != df.type.shift(1)) | (df.srcip != df.srcip.shift(1)) | (df.srcasn != df.srcasn.shift(1)) | (df.CIDR != df.CIDR.shift(1)) | (df.aspath != df.aspath.shift(1))| (df.nexthop != df.nexthop.shift(1))]

    df = df[pd.to_numeric(df['ts'], errors='coerce').notnull()]
    df['ts'] = df['ts'].astype(str).astype(float)
    df.dropna(subset=['ts', 'srcip'])

    #Removing all State Messages
    df = df[df.type != 'S']

    print('Removing Beacon Updates...')
    df_Anch = df.loc[df.CIDR.isin(lst_anchor)]

    for index, row in df_Anch.iterrows():
        W_bef = row.ts - 300 # - 5 minutes
        W_aft = row.ts + 300 # + 5 minutes

        _anch = row.CIDR

        if (_anch in df_BA.ANCHOR.values):
            ix = df_BA.index[df_BA['ANCHOR'] == _anch].tolist()
            #Obtain the Beacon associated to that Anchor
            _beac = df_BA.iloc[ix[0]]['BEACON']
            #Remove the update associated to that Beacon in the range selected
            df = df.drop(df[(df.CIDR == _beac) & (df.ts>=W_bef) & (df.ts<=W_aft)].index)

    df.dropna(subset=['CIDR'], inplace = True)
    df.reset_index(drop=True, inplace=True)

    #df_Beac = df.loc[df.CIDR.isin(lst_beacon)]
    #print('Numero de UPDATES de Beacons: ' +str(df_Beac.shape))
    #print('shape of df after cleaning: ' + str(df.shape))

    return (df[['CIDR', 'ts', 'srcip', 'aspath', 'origin', 'community']])
